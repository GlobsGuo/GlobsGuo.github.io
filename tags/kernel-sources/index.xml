<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel sources on Globs&#39; blog</title>
    <link>https://globsguo.github.io/tags/kernel-sources/</link>
    <description>Recent content in kernel sources on Globs&#39; blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://globsguo.github.io/tags/kernel-sources/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>grub参数&#34;console=&#34;</title>
      <link>https://globsguo.github.io/posts/grub_parameters/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/posts/grub_parameters/</guid>
      <description>本文主要分析Linux内核如何处理grub参数中的console=ttyS0,115200n8部分，中间还会穿插一些 include/linux/init.h 的内容。
grub参数中的console=有多种形式，根据 Documentation/kernel-parameters.txt 文件，
 console= [KNL] Output console device and options.</description>
    </item>
    
    <item>
      <title>Memory Management Initialization</title>
      <link>https://globsguo.github.io/posts/memory_management/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/posts/memory_management/</guid>
      <description>本文从Linux内核的内存管理关键的数据结构出发，结合内核源码中的注释，说明Linux的内存管理用到的数据结构的初始化流程。本文以x86-64架构为例，假设系统类型为NUMA，sparse memory model。
1. Memory Model 内存模型一部分内容主要来自网上， Documentation 中没有找到相关的内容。</description>
    </item>
    
    <item>
      <title>mm-slab</title>
      <link>https://globsguo.github.io/posts/mm-slab/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/posts/mm-slab/</guid>
      <description>SLAB用来响应较小的内存分配请求，事实上，现在的Linux内核使用的是SLUB——unqueued SLAB分配器。
本文从常用的内核内存分配函数 kmalloc 出发，介绍了 kmalloc 函数的执行路径和slab cache的初始化流程。
1. kmalloc 搞内核的肯定对 kmalloc 不会陌生，和 malloc 函数类似，这个函数用来分配内存，定义在 include/linux/slab.</description>
    </item>
    
    <item>
      <title>printk函数</title>
      <link>https://globsguo.github.io/posts/printk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/posts/printk/</guid>
      <description>1. printk.c中的重要变量 首先介绍一些 kernel/printk/printk.c 中定义的一些十分重要的变量。
/* console_sem用来保护对console_drivers列表的访问 */ static DEFINE_SEMAPHORE(console_sem); /* console_drivers保存所有的控制台驱动，所有的控制台 驱动都调用register_console函数注册到console_drivers 列表中 */ struct console *console_drivers; EXPORT_SYMBOL_GPL(console_drivers); /* 注释说这两个变量用来调试VT代码 */ static int console_locked, console_suspended; /* 如果exclusive_console不是NULL，信息只会输出到这个控制台 */ static struct console *exclusive_console; /* 包含所有的控制台命令行信息，只有__add_preferred_consoles函数 会向其中增加元素，数组长度为8 */ static struct cmdline_console console_cmdline[MAX_CMDLINECONSOLES]; /* 控制台代码可能会调用schedule()标志 */ static int console_may_schedule;  1.</description>
    </item>
    
  </channel>
</rss>