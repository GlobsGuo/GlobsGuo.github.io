<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kernel-sources on Globs&#39; Catchall</title>
    <link>https://globsguo.github.io/tags/kernel-sources/</link>
    <description>Recent content in kernel-sources on Globs&#39; Catchall</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 24 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://globsguo.github.io/tags/kernel-sources/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>mm-buddy allocator</title>
      <link>https://globsguo.github.io/post/mm-buddy_allocator/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm-buddy_allocator/</guid>
      <description>slab系统调用buddy分配器分配所需要的内存页，作为slab使用。 和slab系统不同，buddy系统主要响应较大(至少为一个内存页)的内</description>
    </item>
    
    <item>
      <title>mm-buddy_allocator初始化</title>
      <link>https://globsguo.github.io/post/mm-buddy_allocator_initialization/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm-buddy_allocator_initialization/</guid>
      <description>在介绍伙伴系统之前，我们先看一下伙伴系统所需要的数据结构的初始化流程。 伙伴系统使用的数据结构主要有每个内存节点的内存信息和每个内存区域的内存</description>
    </item>
    
    <item>
      <title>mm-slab初始化</title>
      <link>https://globsguo.github.io/post/mm-slab_initialization/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm-slab_initialization/</guid>
      <description>SLAB用来响应较小的内存分配请求，事实上，现在的Linux内核使用的是SLUB——unqueued SLAB分配器。 Linux内核支持三种分</description>
    </item>
    
    <item>
      <title>mm-slab对象的分配</title>
      <link>https://globsguo.github.io/post/mm-slab_objects_allocation/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm-slab_objects_allocation/</guid>
      <description>slab cache建立后，就可以从中分配对象。以 kmalloc_caches 为例，执行 kmalloc 函数时会从中分配对象。 1. kmalloc 搞内核的肯定对 kmalloc 不会陌生，和 malloc 函数类似，这个函数用来分配内</description>
    </item>
    
    <item>
      <title>mm-slab对象的回收</title>
      <link>https://globsguo.github.io/post/mm-slab_objects_free/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm-slab_objects_free/</guid>
      <description>本文仍然以slab cache kmalloc_caches 为例，结合 kfree 函数的实现，说明slab对象的回收过程。 1. kfree 通过 kfree 函数释放 kmalloc 申请的内存时，对应的函数定义在 mm/slub.c 中。 void kfree(const void *x) {</description>
    </item>
    
    <item>
      <title>grub参数&#34;console=&#34;</title>
      <link>https://globsguo.github.io/post/grub_parameters/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/grub_parameters/</guid>
      <description>本文主要分析Linux内核如何处理grub参数中的console=ttyS0,115200n8部分，中间还会穿插一些 include/linux/init.h 的内容。 grub参数中</description>
    </item>
    
    <item>
      <title>printk函数</title>
      <link>https://globsguo.github.io/post/printk/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/printk/</guid>
      <description>1. printk.c中的重要变量 首先介绍一些 kernel/printk/printk.c 中定义的一些十分重要的变量。 /* console_sem用来保护对console_drivers列表</description>
    </item>
    
  </channel>
</rss>