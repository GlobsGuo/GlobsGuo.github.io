<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory on Globs&#39; blog</title>
    <link>https://globsguo.github.io/tags/memory/</link>
    <description>Recent content in memory on Globs&#39; blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://globsguo.github.io/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>control group</title>
      <link>https://globsguo.github.io/posts/control_group/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/posts/control_group/</guid>
      <description>1. Control Group 1.1. What is cgroup cgroup即control cgroup，控制组，提供了一种将一组进程及其未来的子进程聚集/分离为具有特定行为和层次结构的组的机制。</description>
    </item>
    
    <item>
      <title>mm-slab</title>
      <link>https://globsguo.github.io/posts/mm-slab/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/posts/mm-slab/</guid>
      <description>SLAB用来响应较小的内存分配请求，事实上，现在的Linux内核使用的是SLUB——unqueued SLAB分配器。
本文从常用的内核内存分配函数 kmalloc 出发，介绍了 kmalloc 函数的执行路径和slab cache的初始化流程。
1. kmalloc 搞内核的肯定对 kmalloc 不会陌生，和 malloc 函数类似，这个函数用来分配内存，定义在 include/linux/slab.</description>
    </item>
    
  </channel>
</rss>