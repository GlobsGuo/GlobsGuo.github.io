<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Globs&#39; Catchall</title>
    <link>https://globsguo.github.io/</link>
    <description>Recent content on Globs&#39; Catchall</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 22 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://globsguo.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3B_chqp17-debug,branch_profile,tsc,and_intel_RDT_features</title>
      <link>https://globsguo.github.io/post/intel-sdm/3b_chap17-debugbranch_profiletscand_intel_rdt_features/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3b_chap17-debugbranch_profiletscand_intel_rdt_features/</guid>
      <description>Intel 64 和 IA-32 架构提供了调试代码和监视性能的调试工具 , 对于调试应用程序 , 系统软件和多任务 OS 十分重要 . 调试支持通过调试寄存器和 MSR 获取 : 调试寄存器保存</description>
    </item>
    
    <item>
      <title>3B_chap15-machine_check_architecture</title>
      <link>https://globsguo.github.io/post/intel-sdm/3b_chap15-machine_check_architecture/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3b_chap15-machine_check_architecture/</guid>
      <description>1. 机器检查架构 机器检查架构提供了探测和报告硬件 ( 机器 ) 错误的机制 , 这些错误包括 : 系统总线错误 , ECC 错误 , parity 错误 , cache 错误 , TLB 错误 . 处理器通过产生</description>
    </item>
    
    <item>
      <title>3B_chap14-power_and_thermal_management</title>
      <link>https://globsguo.github.io/post/intel-sdm/3b_chap14-power_and_thermal_management/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3b_chap14-power_and_thermal_management/</guid>
      <description>1. 增强的 Intel SpeedStep 技术 增强的 Intel SpeedStep 技术通过性能状态切换管理处理器的功耗 , 这些性能状态定义为和不同电压和频率相关联的离散运行点 . 增强的 Intel SpeedStep 技术和之前的</description>
    </item>
    
    <item>
      <title>1_chap3-basic_execution_environment</title>
      <link>https://globsguo.github.io/post/intel-sdm/1_chap3-basic_execution_environment/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/1_chap3-basic_execution_environment/</guid>
      <description>1. Overview of the Basic Execution Environment Intel 处理器架构分为两类 : IA-32 和 Intel 64 , 前者支持保护模式 , 实地址模式 , SMM 模式 ( 通过 APIC 的 SMI 中断或者激活外部 SMI# 进入 ) ; 后者增加了 IA-32e 模式 , 包</description>
    </item>
    
    <item>
      <title>3A_chap4-paging</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap4-paging/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap4-paging/</guid>
      <description>1. Paging Modes and Control Bits 分页行为受 CR0 , CR4 , IA32_EFER MSR 和 EFLAGS 寄存器的影响 . 具体如何影响 , 以及怎样正确开启分页分页模式 , 需要按照一定的次序设置相关的寄存器 , 查阅 sdm .</description>
    </item>
    
    <item>
      <title>3A_chap12-Intel_MMX_technology_system_programming</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap12-intel_mmx_technology_system_programming/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap12-intel_mmx_technology_system_programming/</guid>
      <description>1. MMX 指令集的模拟 不同于 x87 FPU 指令 , IA-32 和 Intel 64 架构不支持 MMX 指令的模拟 , CR0.EM 标志无法用于 MMX 指令的模拟 . CR0 的标志位和 MMX 指令的执行情况关系如下 : EM MP TS action 0</description>
    </item>
    
    <item>
      <title>3A_chap13-system_programming_for_instruction_set_extensions_and_processor_extended_states</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap13-system_programming_for_instruction_set_extensions_and_processor_extended_states/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap13-system_programming_for_instruction_set_extensions_and_processor_extended_states/</guid>
      <description>1. 简介 本章介绍操作处理器的状态扩展 ( SSE 状态 , XMM 寄存器 , MXCSR ) 和其他的处理器扩展状态的指令集扩展的系统编程特性 . 操作 SSE 状态的指令集扩展包括 streaming SIMD extensions</description>
    </item>
    
    <item>
      <title>3A_chap11-memory_cache_control</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap11-memory_cache_control/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap11-memory_cache_control/</guid>
      <description>1. 内部 cache , TLB 和缓冲区 cache 有四种类型 : trace cache 基于 Intel NetBurst 微架构的处理器有 , 在所有的模式下可用 : 保护模式 , SMM , 实地址模式 . L1 cache L1 cache 分两部分 , 一部分专用于</description>
    </item>
    
    <item>
      <title>3A_chap2-system_architecture_overview</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap2-system_architecture_overview/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap2-system_architecture_overview/</guid>
      <description>1. Overview Of the System-Level Architecture 每个段描述符都有关联的段选择器 , 后者提供 GDT 或者 LDT 内的一个索引 , 一个全局 / 局部标志 ( 指明段选择器指向 LDT 还是 GDT ) , 以及访问权限信息 ,</description>
    </item>
    
    <item>
      <title>3A_chap3-protected_mode_memory_management</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap3-protected_mode_memory_management/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap3-protected_mode_memory_management/</guid>
      <description>1. Memory Management Overview IA-32 架构的内存管理工具分成两部分 : 分段和分页 . 要访问段中的某个字节 , 必须提供字节的 逻辑地址 &amp;mdash;- 段选择器 : 段内偏移 . 分段机制将逻辑地址转化</description>
    </item>
    
    <item>
      <title>3A_chap10-APIC</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap10-apic/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap10-apic/</guid>
      <description>1. 简介 高级可编程中断控制器 , 本章中称为 local APIC , 向处理器提供两个基本功能 : 从处理器的中断引脚 , 内部源和外部的 IO APIC ( 或其他外部中断控制器 ) 接收中断</description>
    </item>
    
    <item>
      <title>3A_chap9-processor_management_and_initialization</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap9-processor_management_and_initialization/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap9-processor_management_and_initialization/</guid>
      <description>1. 简介 上电或者重启后 , 系统总线上的每个处理器执行硬件初始化和可选的 BIST , 将寄存器初始化为已知状态 , 进入实地址模式 . 并且无效内部 cache , TLB 和 branch target buffer (</description>
    </item>
    
    <item>
      <title>3A_chap8-multi-processor_management</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap8-multi-processor_management/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap8-multi-processor_management/</guid>
      <description>1. 简介 Intel 提供了管理和提高连接到相同系统总线的多处理器性能的机制 , 包括 : 对系统内存执行原子操作所需的总线锁和 cache 一致性管理 串行化的指令 位于处理器</description>
    </item>
    
    <item>
      <title>3A_chap6-interrupt_and_exception_handling</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap6-interrupt_and_exception_handling/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap6-interrupt_and_exception_handling/</guid>
      <description>中断在程序执行期间随机发生 , 作为对硬件信号的回应 . 系统硬件使用中断处理处理器外的事件 , 软件可以通过 INT n 指令产生中断 . 执行指令时处理器检测到错</description>
    </item>
    
    <item>
      <title>3A_chap7-task_management</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap7-task_management/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap7-task_management/</guid>
      <description>1. 简介 一个任务由两部分组成 : 任务的执行空间和 TSS , 前者包括代码段 , 栈段 , 一个或多个数据段 ; 后者指明构成任务的执行空间的段 , 为任务的状态信息提供</description>
    </item>
    
    <item>
      <title>3A_chap5-protection</title>
      <link>https://globsguo.github.io/post/intel-sdm/3a_chap5-protection/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/3a_chap5-protection/</guid>
      <description>1. Protection Overview 使用保护机制时 , 每个内存引用的检查都在内存 cycle 之前进行 . 由于检查和地址转换过程并行执行 , 没有性能开销 . 执行的保护检查可以分成下面几类 : 限</description>
    </item>
    
    <item>
      <title>1_chap6-procedure_calls,interrupts,exceptions</title>
      <link>https://globsguo.github.io/post/intel-sdm/1_chap6-procedure_callsinterruptsexceptions/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/1_chap6-procedure_callsinterruptsexceptions/</guid>
      <description>处理器支持两种不同的程序调用方式 : CALL 和 RET 指令 ENTER 和 LEAVE 指令 , 结合 CALL 和 RET 两种机制都需要程序栈 , 通常简称为栈 , 保存调用程序的状态 , 传递参数给被调用程</description>
    </item>
    
    <item>
      <title>2_chap2-instruction_format</title>
      <link>https://globsguo.github.io/post/intel-sdm/2_chap2-instruction_format/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/intel-sdm/2_chap2-instruction_format/</guid>
      <description>IA-32 汇编语言的格式为 : label: mnemonic argument1 , argument2 , argument3 . 其中 : label 是后面跟有冒号的标识符 . mnemonic 是具有相同功能的一类指令操作码的保留名称 . 操作数 argument 1 2 3 是可选的 , 操作</description>
    </item>
    
    <item>
      <title>mm-buddy_allocator_free_page</title>
      <link>https://globsguo.github.io/post/mm/mm-buddy_allocator_free_page/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm/mm-buddy_allocator_free_page/</guid>
      <description>1. 内存区域的回收操作 mm-buddy_allocator 分配页框中讲到的 get_page_from_freelist 函数，在 zone 的空闲页框数不满足 watermark 被视为 full 时，并且 zone 允许进行页框回收，就会调用 zone_reclaim 试着释放一些页框。 zone_reclaim 定义</description>
    </item>
    
    <item>
      <title>mm-buddy_allocator_memory_compaction</title>
      <link>https://globsguo.github.io/post/mm/mm-memory_compaction/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm/mm-memory_compaction/</guid>
      <description>1. 背景介绍 Documentation 目录没有关于 memory compaction 的详细介绍，本文从 slab 分配器的一个慢路径分配函数 __alloc_pages_direct_compact 的主要函数 try_to_compact_pages 入手，介绍内存压缩的相关内容。 压缩操作用到的一个关键</description>
    </item>
    
    <item>
      <title>mm-buddy_allocator_page_allocation-2</title>
      <link>https://globsguo.github.io/post/mm/mm-buddy_allocator_page_allocation-2/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm/mm-buddy_allocator_page_allocation-2/</guid>
      <description>如果 __alloc_pages_nodemask 调用 get_page_from_freelist 没有申请到内存页，就会屏蔽掉传递的 gfp 中的 __GPF_IO 标志，调用 __alloc_pages_slowpath 申请内存。 1. __alloc_pages_slowpath 和 __alloc_pages_nodemask 不同， slowpath 不会对 alloc_flags 设置较多限制，而是尽可能的满足分配请求，</description>
    </item>
    
    <item>
      <title>mm-slab_object_free</title>
      <link>https://globsguo.github.io/post/mm/mm-slab_objects_free/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm/mm-slab_objects_free/</guid>
      <description>本文仍然以slab cache kmalloc_caches 为例，结合 kfree 函数的实现，说明slab对象的回收过程。 1. kfree 通过 kfree 函数释放 kmalloc 申请的内存时，对应的函数定义在 mm/slub.c 中。 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>mm-slab_object_allocation</title>
      <link>https://globsguo.github.io/post/mm/mm-slab_objects_allocation/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm/mm-slab_objects_allocation/</guid>
      <description>slab cache建立后，就可以从中分配对象。以 kmalloc_caches 为例，执行 kmalloc 函数时会从中分配对象。 1. kmalloc 搞内核的肯定对 kmalloc 不会陌生，和 malloc 函数类似，这个函数用来分配内</description>
    </item>
    
    <item>
      <title>mm-slab_initialization</title>
      <link>https://globsguo.github.io/post/mm/mm-slab_initialization/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm/mm-slab_initialization/</guid>
      <description>SLAB 用来响应较小的内存分配请求，事实上，现在的 Linux 内核使用的是 SLUB —— unqueued SLAB 分配器。 Linux 内核支持三种分配器，分别为 SLAB ， SLOB ， SLUB 。 x86 架构下，默认采用 SLUB 分配</description>
    </item>
    
    <item>
      <title>mm-buddy_allocator_initialization</title>
      <link>https://globsguo.github.io/post/mm/mm-buddy_allocator_initialization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm/mm-buddy_allocator_initialization/</guid>
      <description>在介绍伙伴系统之前，我们先看一下伙伴系统所需要的数据结构的初始化流程。 伙伴系统使用的数据结构主要有每个内存节点的内存信息和每个内存区域的内存</description>
    </item>
    
    <item>
      <title>mm-buddy_allocator_page_allocation-1</title>
      <link>https://globsguo.github.io/post/mm/mm-buddy_allocator_page_allocation-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm/mm-buddy_allocator_page_allocation-1/</guid>
      <description>slab 系统调用 buddy 分配器分配所需要的内存页，作为 slab 使用。 和 slab 系统不同， buddy 系统主要响应较大 ( 至少为一个内存页 ) 的内存分配请求，本文仍然从 kmalloc 函数的实现</description>
    </item>
    
    <item>
      <title>mm-mem_section</title>
      <link>https://globsguo.github.io/post/mm/mm-memsection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://globsguo.github.io/post/mm/mm-memsection/</guid>
      <description>本文从 Linux 内核的内存管理关键的数据结构出发，结合内核源码中的注释，说明 Linux 的内存管理用到的数据结构的初始化流程。本文以 x86-64 架构为例，假设系统类型为</description>
    </item>
    
  </channel>
</rss>
